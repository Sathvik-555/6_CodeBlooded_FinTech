import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import streamlit as st

st.title("Stock Market Trend Predictor")

st.sidebar.header("Settings")
ticker = st.sidebar.text_input("Enter Stock Ticker (e.g., AAPL)", value="AAPL").upper()
start_date = st.sidebar.date_input("Start Date", value=pd.to_datetime("2015-01-01"))
end_date = st.sidebar.date_input("End Date", value=pd.to_datetime("2023-01-01"))
train_ratio = st.sidebar.slider("Training Data Ratio (%)", 50, 90, 80)

st.write(f"Fetching data for **{ticker}**...")
try:
    data = yf.download(ticker, start=start_date, end=end_date)
    if data.empty:
        st.error("No data found. Please check the ticker or date range.")
        st.stop()
except Exception as e:
    st.error(f"Error fetching data: {e}")
    st.stop()

st.write("### Stock Data Overview", data)

st.write("Preprocessing data for modeling...")
df = data[['Close']]
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df)

sequence_length = 60
X, y = [], []
for i in range(sequence_length, len(scaled_data)):
    X.append(scaled_data[i-sequence_length:i, 0])
    y.append(scaled_data[i, 0])
X, y = np.array(X), np.array(y)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

train_size = int(len(X) * train_ratio / 100)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

st.write("Building LSTM model...")
model = Sequential([
    LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
    Dropout(0.2),
    LSTM(units=50, return_sequences=False),
    Dropout(0.2),
    Dense(units=1)
])
model.compile(optimizer='adam', loss='mean_squared_error')

st.write("Training the model...")
with st.spinner("Training in progress..."):
    history = model.fit(X_train, y_train, epochs=5, batch_size=32, validation_data=(X_test, y_test), verbose=1)

st.write("Generating predictions...")
predicted_prices = model.predict(X_test)
predicted_prices = scaler.inverse_transform(predicted_prices)
actual_prices = scaler.inverse_transform(y_test.reshape(-1, 1))

st.write("### Prediction vs Actual Prices")
fig, ax = plt.subplots(figsize=(12, 6))
ax.plot(actual_prices, label="Actual Prices", color="blue")
ax.plot(predicted_prices, label="Predicted Prices", color="red")
ax.set_title(f"{ticker} Stock Price Prediction")
ax.set_xlabel("Days")
ax.set_ylabel("Price")
ax.legend()
st.pyplot(fig)

last_60_days = scaled_data[-sequence_length:]
last_60_days = np.reshape(last_60_days, (1, sequence_length, 1))
next_day_price = model.predict(last_60_days)
next_day_price = scaler.inverse_transform(next_day_price)

st.write(f"### Predicted price for the next day: **\(Currency\){next_day_price[0][0]:.2f}**")
