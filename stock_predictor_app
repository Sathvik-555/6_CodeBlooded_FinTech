import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from textblob import TextBlob
import requests
import streamlit as st

# Streamlit app setup
st.title("Stock Market Predictor with Sentiment Analysis")
st.sidebar.header("Settings")

# Sidebar inputs
ticker = st.sidebar.text_input("Enter Stock Ticker (e.g., AAPL)", value="AAPL")
start_date = st.sidebar.date_input("Start Date", value=pd.to_datetime("2015-01-01"))
end_date = st.sidebar.date_input("End Date", value=pd.to_datetime("2023-01-01"))
train_ratio = st.sidebar.slider("Training Data Ratio (%)", 50, 90, 80)

# News API setup
news_api_key = "pub_60597507c72081d03d2bd07b8a8410e3e0c5f"
news_url = f"https://newsdata.io/api/1/news?apikey={news_api_key}&q={ticker}&language=en"

# Fetch real-time stock value
st.write(f"Fetching real-time stock value for {ticker}...")
try:
    ticker_data = yf.Ticker(ticker)
    real_time_data = ticker_data.history(period="1d")
    if not real_time_data.empty:
        current_price = real_time_data["Close"].iloc[-1]
        st.write(f"### Current real-time stock value of {ticker}: **${current_price:.2f}**")
    else:
        st.warning("Could not fetch real-time stock data.")
        current_price = None
except Exception as e:
    st.error(f"Error fetching real-time stock value: {e}")
    current_price = None

# Fetch stock historical data
st.write(f"Fetching historical data for {ticker}...")
data = yf.download(ticker, start=start_date, end=end_date)
if data.empty:
    st.error("No data found. Please check the ticker or date range.")
    st.stop()

# Preprocess data
st.write("Preprocessing data...")
df = data[['Close']]
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df)

sequence_length = 60
X, y = [], []
for i in range(sequence_length, len(scaled_data)):
    X.append(scaled_data[i-sequence_length:i, 0])
    y.append(scaled_data[i, 0])
X, y = np.array(X), np.array(y)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Train-test split
train_size = int(len(X) * train_ratio / 100)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Build LSTM model
st.write("Building LSTM model...")
model = Sequential([
    LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
    Dropout(0.2),
    LSTM(units=50, return_sequences=False),
    Dropout(0.2),
    Dense(units=1)
])
model.compile(optimizer='adam', loss='mean_squared_error')

# Train model
st.write("Training the model...")
history = model.fit(X_train, y_train, epochs=5, batch_size=32, validation_data=(X_test, y_test), verbose=1)

# Predicting and plotting results
st.write("Generating predictions...")
predicted_prices = model.predict(X_test)
predicted_prices = scaler.inverse_transform(predicted_prices)
actual_prices = scaler.inverse_transform(y_test.reshape(-1, 1))

st.write("### Predicted vs Actual Prices")
fig, ax = plt.subplots()
ax.plot(actual_prices, label="Actual Prices", color="blue")
ax.plot(predicted_prices, label="Predicted Prices", color="red")
ax.set_title(f"{ticker} Stock Price Prediction")
ax.set_xlabel("Days")
ax.set_ylabel("Price")
ax.legend()
st.pyplot(fig)

# Safety message
st.warning("The immediate predicted value might not be highly accurate due to short-term market volatility.")

# Predict next day price
st.write("### Predicting Next Day Price...")
last_60_days = scaled_data[-sequence_length:]
last_60_days = np.reshape(last_60_days, (1, sequence_length, 1))
next_day_price = model.predict(last_60_days)
next_day_price = scaler.inverse_transform(next_day_price)
st.write(f"Predicted price for the next day: **${next_day_price[0][0]:.2f}**")

# Predict 1-month and 2-month later prices (basic projection)
st.write("### Predicting 1-Month and 2-Month Prices...")
one_month_later_price = next_day_price[0][0] * 1.03  # Assuming a 3% monthly growth
two_month_later_price = one_month_later_price * 1.03  # Compounding for the second month
st.write(f"Predicted price 1 month later: **${one_month_later_price:.2f}**")
st.write(f"Predicted price 2 months later: **${two_month_later_price:.2f}**")
